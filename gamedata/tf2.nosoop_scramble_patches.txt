"Games"
{
	"tf"
	{
		"MemPatches"
		{
			"CTFGameRules::FlPlayerFallDamage()::DisableFallDamageVariance"
			{
				// populate random scalar with 1.0f
				"signature"			"CTFGameRules::FlPlayerFallDamage()"
				"linux"
				{
					"offset"		"D5h"
					
					// mov dword ptr [esp+8], 1.2f; mov dword ptr [esp+4], 0.8f
					"verify"		"\xC7\x44\x24\x08\x9A\x99\x99\x3F\xC7\x44\x24\x04\xCD\xCC\x4C\x3F"
					
					// replace immediates with 1.0f
					"patch"			"\xC7\x44\x24\x08\x00\x00\x80\x3F\xC7\x44\x24\x04\x00\x00\x80\x3F"
				}
				"windows"
				{
					// windows performs non-immediate loads, so we replace the instructions with immediate loads instead
					"offset"		"D7h"
					
					// fld 1.2; fstp [esp+0x4]; fld 0.8; fstp [esp];
					"verify"		"\xD9\x05\x2A\x2A\x2A\x2A\xD9\x5C\x24\x04\xD9\x05\x2A\x2A\x2A\x2A\xD9\x1C\x24"
					
					// mov dword ptr [esp+0x4], 1.0f; mov dword ptr [esp], 1.0f; nop ...;
					"patch"			"\xC7\x44\x24\x04\x00\x00\x80\x3F\xC7\x04\x24\x00\x00\x80\x3F\x90\x90\x90\x90"
				}
			}
			"CTFPlayer::GetLoadoutItem()::EnableItemRestrictions"
			{
				"signature"			"CTFPlayer::GetLoadoutItem()"
				"linux"
				{
					"offset"		"F0h"
					"verify"		"\x74\xC4"
					"patch"			"\x90\x90"
				}
				"windows"
				{
					"offset"		"A7h"
					"verify"		"\x74\x38"
					"patch"			"\x90\x90"
				}
			}
			"CTFPlayer::ModifyOrAppendCriteria()::DisableHalloweenThrillerTaunt"
			{
				"signature"			"CTFPlayer::ModifyOrAppendCriteria()"
				"linux"
				{
					// convert JA to a JO (never branch)
					"offset"		"151Bh"
					"verify"		"\x77"
					"patch"			"\x70"
				}
				"windows"
				{
					// convert JBE to an unconditional JMP (always branch)
					"offset"		"B77h"
					"verify"		"\x76\x2A"
					"patch"			"\xEB"
				}
			}
			"Host_AccumulateTime()::BypassWindowsCheatCheck"
			{
				"windows"
				{
					// patches to an unconditional jump
					"signature"		"Host_AccumulateTime()"
					"offset"		"FFh"
					"verify"		"\x75\x1B"
					"patch"			"\xEB"
				}
			}
			"PackRatios::WindowsFix"
			{
				"signature"		"PackRatios"
				"windows"
				{
					// changes the small pack ratio scalar from 0x3E4CCCCD to 0x3E4CCCCC
					// 0x3E4CCCCD = 0.20000000298023224 : has issues with rounding precision on double-precision multiply operations (which is what MSVC does)
					// 0x3E4CCCCC = 0.19999998807907104
					// source: https://babbage.cs.qc.cuny.edu/ieee-754.old/32bit.html
					// the game rounds the result up, so having it be slightly less than 0.2 is preferable
					"offset"	"0h"
					"patch"		"\xCC\xCC\x4C\x3E\x00\x00\x00\x3F\x00\x00\x80\x3F"
				}
			}
		}
		"Signatures"
		{
			"CTFGameRules::FlPlayerFallDamage()"
			{
				// unique xref string "cancel_falling_damage"
				"library"	"server"
				"linux"		"@_ZN12CTFGameRules18FlPlayerFallDamageEP11CBasePlayer"
				"windows"	"\x55\x8B\xEC\x51\x53\x56\x8B\x75\x08\x8B\xD9\x57\x85\xF6\x0F\x84\x2A\x2A\x2A\x2A\x8B\x06"
			}
			"CTFPlayer::GetLoadoutItem()"
			{
				"library"	"server"
				"linux"		"@_ZN9CTFPlayer14GetLoadoutItemEiib"
			}
			"CTFPlayer::ModifyOrAppendCriteria()"
			{
				"library"	"server"
				"linux"		"@_ZN9CTFPlayer22ModifyOrAppendCriteriaER14AI_CriteriaSet"
				"windows"	"\x53\x8B\xDC\x83\xEC\x08\x83\xE4\xF0\x83\xC4\x04\x55\x8B\x6B\x04\x89\x6C\x24\x04\x8B\xEC\x81\xEC\x18\x01\x00\x00\x56\x57\x8B\x7B\x08"
			}
			"Host_AccumulateTime()"
			{
				"library"	"engine"
				"windows"	"\x55\x8B\xEC\xD9\x45\x08\x83\xEC\x0C"
			}
			"PackRatios"
			{
				// just grab the array from memory lol
				"library"	"server"
				"windows"	"\xCD\xCC\x4C\x3E\x00\x00\x00\x3F\x00\x00\x80\x3F"
			}
		}
	}
}
